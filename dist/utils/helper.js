"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.chunks = exports.throttle = exports.createHash = exports.Deferred = exports.dpc = exports.UID = exports.now = exports.KAS = exports.sha256 = exports.Decimal = void 0;
const crypto_js_1 = __importDefault(require("crypto-js"));
const decimal_js_1 = require("decimal.js");
Object.defineProperty(exports, "Decimal", { enumerable: true, get: function () { return decimal_js_1.Decimal; } });
const sha256 = (str) => {
    return crypto_js_1.default.SHA256(str).toString(crypto_js_1.default.enc.Hex);
};
exports.sha256 = sha256;
const KAS = (v) => {
    var [int, frac] = (new decimal_js_1.Decimal(v)).mul(1e-8).toFixed(8).split('.');
    int = int.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    frac = frac === null || frac === void 0 ? void 0 : frac.replace(/0+$/, '');
    return frac ? `${int}.${frac}` : int;
};
exports.KAS = KAS;
exports.now = Date.now || function () {
    return new Date().getTime();
};
const UID = (join = '') => (0, exports.now)() + join + (Math.random() * 100000).toFixed(0);
exports.UID = UID;
const dpc = (delay, fn) => {
    if (typeof delay == 'function') {
        let temp = fn;
        fn = delay;
        delay = temp;
    }
    return setTimeout(fn, delay || 0);
};
exports.dpc = dpc;
const Deferred = () => {
    let methods = {};
    let promise = new Promise((resolve, reject) => {
        methods = { resolve, reject };
    });
    Object.assign(promise, methods);
    return promise;
};
exports.Deferred = Deferred;
const createHash = (str) => {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
        const char = str.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash &= hash; // Convert to 32bit integer
    }
    //console.log("hash", str, hash)
    return new Uint32Array([hash])[0].toString(36);
};
exports.createHash = createHash;
// Returns a function, that, when invoked, will only be triggered at most once
// during a given window of time. Normally, the throttled function will run
// as much as it can, without ever going more than once per `wait` duration;
// but if you'd like to disable the execution on the leading edge, pass
// `{leading: false}`. To disable execution on the trailing edge, ditto.
const throttle = (func, wait, options = {}) => {
    let timeout, context, args, result;
    let previous = 0;
    let later = function () {
        previous = options.leading === false ? 0 : (0, exports.now)();
        timeout = null;
        result = func.apply(context, args);
        if (!timeout)
            context = args = null;
    };
    let throttled = function () {
        let _now = (0, exports.now)();
        if (!previous && options.leading === false)
            previous = _now;
        let remaining = wait - (_now - previous);
        //@ts-ignore
        context = this;
        args = arguments;
        if (remaining <= 0 || remaining > wait) {
            if (timeout) {
                clearTimeout(timeout);
                timeout = null;
            }
            previous = _now;
            result = func.apply(context, args);
            if (!timeout)
                context = args = null;
        }
        else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
        }
        return result;
    };
    //@ts-ignore
    throttled.cancel = function () {
        clearTimeout(timeout);
        previous = 0;
        timeout = context = args = null;
    };
    return throttled;
};
exports.throttle = throttle;
const chunks = (list, size) => {
    return list.length ? [list.slice(0, size), ...(0, exports.chunks)(list.slice(size), size)] : [];
};
exports.chunks = chunks;
//# sourceMappingURL=data:application/json;base64,